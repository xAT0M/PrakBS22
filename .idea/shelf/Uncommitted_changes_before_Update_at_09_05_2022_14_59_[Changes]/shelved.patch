Index: main.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include <stdio.h>\r\n\r\nint main() {\r\n    printf(\"Hello, World!\\n\");\r\n    return 0;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.c b/main.c
--- a/main.c	(revision 52639df08b08f48b8d03c76464ddf9616fc24828)
+++ b/main.c	(date 1652100789564)
@@ -1,6 +1,78 @@
 #include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+
+#define BUFSIZE 1024 // Größe des Buffers
+#define TRUE 1
+#define ENDLOSSCHLEIFE 1
+#define PORT 5678
 
 int main() {
-    printf("Hello, World!\n");
-    return 0;
-}
+
+    int rfd; // Rendevouz-Descriptor
+    int cfd; // Verbindungs-Descriptor
+
+    struct sockaddr_in client; // Socketadresse eines Clients
+    socklen_t client_len; // Länge der Client-Daten
+    char in[BUFSIZE]; // Daten vom Client an den Server
+    int bytes_read; // Anzahl der Bytes, die der Client geschickt hat
+
+
+    // Socket erstellen
+    rfd = socket(AF_INET, SOCK_STREAM, 0);
+    if (rfd < 0 )
+    {
+        fprintf(stderr, "socket konnte nicht erstellt werden\n");
+        exit(-1);
+    }
+
+
+    // Socket Optionen setzen für schnelles wiederholtes Binden der Adresse
+    int option = 1;
+    setsockopt(rfd, SOL_SOCKET, SO_REUSEADDR, (const void *) &option, sizeof(int));
+
+
+    // Socket binden
+    struct sockaddr_in server;
+    server.sin_family = AF_INET;
+    server.sin_addr.s_addr = INADDR_ANY;
+    server.sin_port = htons(PORT);
+    int brt = bind(rfd, (struct sockaddr *) &server, sizeof(server));
+    if (brt < 0 ){
+        fprintf(stderr, "socket konnte nicht gebunden werden\n");
+        exit(-1);
+    }
+
+    // Socket lauschen lassen
+    int lrt = listen(rfd, 5);
+    if (lrt < 0 ){
+        fprintf(stderr, "socket konnte nicht listen gesetzt werden\n");
+        exit(-1);
+    }
+
+    while (ENDLOSSCHLEIFE) {
+
+        // Verbindung eines Clients wird entgegengenommen
+        cfd = accept(rfd, (struct sockaddr *) &client, &client_len);
+
+        // Lesen von Daten, die der Client schickt
+        bytes_read = read(cfd, in, BUFSIZE);
+
+        // Zurückschicken der Daten, solange der Client welche schickt (und kein Fehler passiert)
+        while (bytes_read > 0) {
+            printf("sending back the %d bytes I received...\n", bytes_read);
+
+            write(cfd, in, bytes_read);
+            bytes_read = read(cfd, in, BUFSIZE);
+
+        }
+        close(cfd);
+    }
+
+    // Rendevouz Descriptor schließen
+   // close(rfd);
+
+}
\ No newline at end of file
